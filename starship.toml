# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

# Inserts a blank line between shell prompts
# add_newline = true

# Change command timeout
command_timeout = 1000

format = """
[](#9A348E)\
$os\
$username\
$hostname\
$directory\
$git_branch\
$git_status\
$c\
$rust\
$golang\
$nodejs\
$php\
$java\
$kotlin\
$haskell\
$python\
$docker_context\
$lua\
$time\
$cmd_duration\
$line_break\
$character"""

# Core prompt symbols
[character]
success_symbol = "[❯](bold green)"
vimcmd_symbol = "[❮](yellow)"
error_symbol = "[❯](red)"

[directory]
style = "fg:#89B4FA bg:#1E1E2E"
format = "[ $path ]($style)"
truncation_length = 4
truncation_symbol = "…/"

[directory.substitutions]
"Documents" = "󰈙 "
"Downloads" = " "
"Music" = "󰝚 "
"Pictures" = " "
"Developer" = "󰲋 "
".config" = " "
"~" = " "

[os]
disabled = true

[custom.giturl]
description = "Display symbol for remote Git server"
command = '''
GIT_REMOTE=$(command git ls-remote --get-url 2> /dev/null)
if [[ "$GIT_REMOTE" =~ "github" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "gitlab" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "bitbucket" ]]; then
    GIT_REMOTE_SYMBOL=" "
elif [[ "$GIT_REMOTE" =~ "git" ]]; then
    GIT_REMOTE_SYMBOL=" "
else
    GIT_REMOTE_SYMBOL=" "
fi
echo "$GIT_REMOTE_SYMBOL"
'''
when = 'git rev-parse --is-inside-work-tree 2> /dev/null'
format = "at $output"

[git_branch]
symbol = " "
style = "fg:#89B4FA bg:#1E1E2E"
format = '[[ $symbol$branch ](fg:#89B4FA bg:#1E1E2E)]($style)'

[git_status]
style = "fg:#89B4FA bg:#1E1E2E"
format = '([\[$all_status$ahead_behind\] ]($style))'
conflicted = "="
ahead = "⇡${count}"
behind = "⇣${count}"
diverged = "⇕⇡${ahead_count}⇣${behind_count}"
up_to_date = "✓"
untracked = "?${count}"
stashed = "*"
modified = "!${count}"
staged = "+${count}"
renamed = "»${count}"
deleted = "✘${count}"

[dotnet]
symbol = ''
style = 'bold purple'
format = '[$symbol($version)]($style)'

[lua]
symbol = " "
style = "bold blue"
format = "via [$symbol($version )]($style)"

[nodejs]
symbol = " "
style = "bold green"
format = "via [$symbol($version )]($style)"

[c]
symbol = " "
style = "bold blue"
format = "via [$symbol($version )]($style)"

[rust]
symbol = " "
style = "bold red"
format = "via [$symbol($version )]($style)"

[golang]
symbol = " "
style = "bold cyan"
format = "via [$symbol($version )]($style)"
detect_files = ["go.mod"]

[php]
symbol = " "
style = "bold purple"
format = "via [$symbol($version )]($style)"

[java]
symbol = " "
style = "bold red"
format = "via [$symbol($version )]($style)"

[kotlin]
symbol = " "
style = "bold blue"
format = "via [$symbol($version )]($style)"

[haskell]
symbol = " "
style = "bold purple"
format = "via [$symbol($version )]($style)"

[python]
symbol = " "
style = "bold yellow"
format = "via [$symbol($version )]($style)"
pyenv_version_name = true
python_binary = ["./venv/bin/python", "python", "python3", "python2"]
detect_extensions = ["py"]

[docker_context]
symbol = " "
style = "bold blue"
format = "via [$symbol$context]($style) "

[cmd_duration]
min_time = 500
format = "took [$duration](bold yellow)"

[time]
disabled = false
style = "bold white"
format = "[$time]($style)"
time_format = "%R"

[username]
style_user = "purple bold"
style_root = "red bold"
format = "[$user]($style) "
disabled = false
show_always = false

[hostname]
ssh_only = false
format = "on [$hostname](bold red) "
disabled = false

[memory_usage]
disabled = false
threshold = -1
symbol = " "
style = "bold dimmed green"
format = "$symbol[${ram}( | ${swap})]($style) "

[package]
symbol = " "
style = "bold 208"
display_private = true
format = "via [$symbol$version]($style) "

[shell]
fish_indicator = ""
powershell_indicator = ""
unknown_indicator = "mystery shell"
style = "cyan bold"
disabled = false

[status]
style = "red"
symbol = "✖"
format = '[\[$symbol $common_meaning$signal_name$maybe_int\]]($style) '
map_symbol = true
disabled = false

[aws]
symbol = "  "
format = 'on [$symbol($profile )(\($region\) )]($style)'
style = "bold yellow"

[kubernetes]
format = 'on [⛵ ($cluster)](bold purple) '
disabled = false

[terraform]
format = "via [ terraform $version]($style) "

[vagrant]
format = "via [ vagrant $version]($style) "

[nix_shell]
symbol = " "
